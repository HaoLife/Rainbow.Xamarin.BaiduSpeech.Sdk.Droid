com/baidu/speech/aidl/EventListener = Com.Baidu.Speech.Aidl.IEventListener
  onEvent(Ljava/lang/String;Ljava/lang/String;[BII)V = OnEvent(string, string, byte[], int, int)
com/baidu/speech/aidl/EventManager = Com.Baidu.Speech.Aidl.IEventManager
  registerListener(Lcom/baidu/speech/aidl/EventListener;)V = RegisterListener(Com.Baidu.Speech.Aidl.IEventListener)
  send(Ljava/lang/String;Ljava/lang/String;[BII)V = Send(string, string, byte[], int, int)
  unregisterListener(Lcom/baidu/speech/aidl/EventListener;)V = UnregisterListener(Com.Baidu.Speech.Aidl.IEventListener)
com/baidu/speech/aidl/EventManagerFactory = Com.Baidu.Speech.Aidl.IEventManagerFactory
  create(Ljava/lang/String;)Lcom/baidu/speech/aidl/EventManager; = Create(string)
com/baidu/speech/aidl/EventRecognitionService = Com.Baidu.Speech.Aidl.EventRecognitionService
  <init>()V = .ctor()
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
com/baidu/speech/asr/AnalysisInterceptor = Com.Baidu.Speech.Asr.AnalysisInterceptor
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getInstance(Landroid/content/Context;)Lcom/baidu/speech/asr/AnalysisInterceptor; = GetInstance(Android.Content.Context)
  onEvent(Ljava/lang/String;Ljava/lang/String;[BII)V = OnEvent(string, string, byte[], int, int)
  onEvent(Ljava/lang/String;Ljava/lang/String;[BIIZ)V = OnEvent(string, string, byte[], int, int, bool)
  registerListener(Lcom/baidu/speech/EventListener;)V = RegisterListener(Com.Baidu.Speech.IEventListener)
  send(Ljava/lang/String;Ljava/lang/String;[BII)V = Send(string, string, byte[], int, int)
  unregisterListener(Lcom/baidu/speech/EventListener;)V = UnregisterListener(Com.Baidu.Speech.IEventListener)
com/baidu/speech/asr/ASRListener = Com.Baidu.Speech.Asr.IASRListener
  onEvent(Ljava/lang/String;Ljava/lang/String;[BIIZ)V = OnEvent(string, string, byte[], int, int, bool)
com/baidu/speech/asr/ASRMessage = Com.Baidu.Speech.Asr.ASRMessage
  <init>(Ljava/lang/String;Ljava/lang/String;[BII)V = .ctor(string, string, byte[], int, int)
  <init>(Ljava/lang/String;Ljava/lang/String;[BIIZ)V = .ctor(string, string, byte[], int, int, bool)
  mCommand = MCommand
  mData = MData
  mIsVip = MIsVip
  mLength = MLength
  mOffset = MOffset
  mParam = MParam
com/baidu/speech/asr/ErrorCode = Com.Baidu.Speech.Asr.ErrorCode
  <init>()V = .ctor()
  RECOGNIZER_OK = RecognizerOk
  RECORDING_EXCEPTION = RecordingException
  RECORDING_FILE_OPEN_FAIL = RecordingFileOpenFail
  RECORDING_INTERRUPT = RecordingInterrupt
  RECORDING_NO_PERMISSION = RecordingNoPermission
  RECORDING_OPEN_FAIL = RecordingOpenFail
  getDesc(I)Ljava/lang/String; = GetDesc(int)
  getMessage(I)Ljava/lang/String; = GetMessage(int)
com/baidu/speech/asr/EventContext = Com.Baidu.Speech.Asr.EventContext
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getSdkSharedPreferences()Landroid/content/SharedPreferences; = SdkSharedPreferences
  byteToShortArray([BII)[S = ByteToShortArray(byte[], int, int)
  computePower([BI)J = ComputePower(byte[], int)
  computePower([SI)J = ComputePower(short[], int)
  httpRequest(Ljava/lang/String;Ljava/util/Map;[BZ)Ljava/lang/String; = HttpRequest(string, System.Collections.Generic.IDictionary<string, string>, byte[], bool)
  join(Ljava/util/List;Ljava/lang/String;)Ljava/lang/String; = Join(System.Collections.Generic.IList<string>, string)
  loadBytesFromUri(Ljava/lang/String;)[B = LoadBytesFromUri(string)
  loadJsonFromUri(Ljava/lang/String;)Lorg/json/JSONObject; = LoadJsonFromUri(string)
  loadJsonFromUri(Ljava/lang/String;ZZ)Lorg/json/JSONObject; = LoadJsonFromUri(string, bool, bool)
  loadJsonFromUriOrThrow(Ljava/lang/String;)Lorg/json/JSONObject; = LoadJsonFromUriOrThrow(string)
  loadJsonFromUriOrThrow(Ljava/lang/String;ZZ)Lorg/json/JSONObject; = LoadJsonFromUriOrThrow(string, bool, bool)
  loadStringFromUri(Ljava/lang/String;)Ljava/lang/String; = LoadStringFromUri(string)
  loadStringFromUri(Ljava/lang/String;Z)Ljava/lang/String; = LoadStringFromUri(string, bool)
  loggerIt(Ljava/lang/Object;[Ljava/lang/String;)Ljava/lang/Object; = LoggerIt(Java.Lang.Object, params string[])
  searchItemFromJson(Lorg/json/JSONObject;Ljava/lang/String;)Ljava/lang/Object; = SearchItemFromJson(Org.Json.JSONObject, string)
com/baidu/speech/asr/EventManagerAsr = Com.Baidu.Speech.Asr.EventManagerAsr
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getSDKVersion()Ljava/lang/String; = SDKVersion
  onEvent(Ljava/lang/String;Ljava/lang/String;[BII)V = OnEvent(string, string, byte[], int, int)
  onEvent(Ljava/lang/String;Ljava/lang/String;[BIIZ)V = OnEvent(string, string, byte[], int, int, bool)
  registerListener(Lcom/baidu/speech/EventListener;)V = RegisterListener(Com.Baidu.Speech.IEventListener)
  send(Ljava/lang/String;Ljava/lang/String;[BII)V = Send(string, string, byte[], int, int)
  unregisterListener(Lcom/baidu/speech/EventListener;)V = UnregisterListener(Com.Baidu.Speech.IEventListener)
com/baidu/speech/asr/EventManagerSlot = Com.Baidu.Speech.Asr.EventManagerSlot
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  registerListener(Lcom/baidu/speech/EventListener;)V = RegisterListener(Com.Baidu.Speech.IEventListener)
  send(Ljava/lang/String;Ljava/lang/String;[BII)V = Send(string, string, byte[], int, int)
  unregisterListener(Lcom/baidu/speech/EventListener;)V = UnregisterListener(Com.Baidu.Speech.IEventListener)
com/baidu/speech/asr/EventManagerWp = Com.Baidu.Speech.Asr.EventManagerWp
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getSDKVersion()Ljava/lang/String; = SDKVersion
  registerListener(Lcom/baidu/speech/EventListener;)V = RegisterListener(Com.Baidu.Speech.IEventListener)
  send(Ljava/lang/String;Ljava/lang/String;[BII)V = Send(string, string, byte[], int, int)
  unregisterListener(Lcom/baidu/speech/EventListener;)V = UnregisterListener(Com.Baidu.Speech.IEventListener)
com/baidu/speech/asr/PrivateConstant = Com.Baidu.Speech.Asr.PrivateConstant
  <init>()V = .ctor()
  APIKEY = Apikey
  ASR_AUDIO_HANDLER_ERROR = AsrAudioHandlerError
  ASR_HTTP_ERROR = AsrHttpError
  ASR_LOCAL_NETWORK_ERROR = AsrLocalNetworkError
  ASR_OFFLINE_ENGINE_ERROR = AsrOfflineEngineError
  ASR_ONLINE_ENGINE_ERROR = AsrOnlineEngineError
  ASR_OTHER_ERROR = AsrOtherError
  ASR_RECORDER_ERROR = AsrRecorderError
  ASR_SERVER_ERROR = AsrServerError
  AUTH = Auth
  BUA = Bua
  COK = Cok
  ENABLE_EARLY_RETURN = EnableEarlyReturn
  ENABLE_LONG_SPEECH = EnableLongSpeech
  FRM = Frm
  KEY_WORD = KeyWord
  LM_RES_FILE_PATH = LmResFilePath
  OFF_GRAMM_LM = OffGrammLm
  OFFLINE_ENGINE = OfflineEngine
  PFM = Pfm
  PTC = Ptc
  PU = Pu
  RSV = Rsv
  SERVER_VAD = ServerVad
  UID = Uid
  UPLOAD_CONTRACT_DATA = UploadContractData
  UPLOAD_SLOT_NAME = UploadSlotName
  UPLOAD_WORDS = UploadWords
  VER = Ver
com/baidu/speech/asr/SlotControl = Com.Baidu.Speech.Asr.SlotControl
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  postEvent(Ljava/lang/String;Ljava/lang/String;)Lcom/baidu/speech/core/BDSErrorDescription; = PostEvent(string, string)
  receiveCoreEvent(Lcom/baidu/speech/core/BDSMessage;Lcom/baidu/speech/core/BDSSDKLoader$BDSSDKInterface;)V = ReceiveCoreEvent(Com.Baidu.Speech.Core.BDSMessage, Com.Baidu.Speech.Core.BDSSDKLoader.IBDSSDKInterface)
  setListener(Lcom/baidu/speech/EventListener;)V = SetListener(Com.Baidu.Speech.IEventListener)
com/baidu/speech/asr/SpeechConstant = Com.Baidu.Speech.Asr.SpeechConstant
  <init>()V = .ctor()
  ACCEPT_AUDIO_DATA = AcceptAudioData
  ACCEPT_AUDIO_VOLUME = AcceptAudioVolume
  APP_ID = AppId
  APP_KEY = AppKey
  APP_NAME = AppName
  ASR_CALLBACk_NAME = ASRCALLBACkNAME
  ASR_CANCEL = AsrCancel
  ASR_KWS_LOAD_ENGINE = AsrKwsLoadEngine
  ASR_KWS_UNLOAD_ENGINE = AsrKwsUnloadEngine
  ASR_OFFLINE_ENGINE_DAT_FILE_PATH = AsrOfflineEngineDatFilePath
  ASR_OFFLINE_ENGINE_GRAMMER_FILE_PATH = AsrOfflineEngineGrammerFilePath
  ASR_OFFLINE_ENGINE_LICENSE_FILE_PATH = AsrOfflineEngineLicenseFilePath
  ASR_START = AsrStart
  ASR_STOP = AsrStop
  ASR_UPLOAD_CANCEL = AsrUploadCancel
  ASR_UPLOAD_CONTRACT = AsrUploadContract
  ASR_UPLOAD_WORDS = AsrUploadWords
  ASR_VAD_RES_FILE_PATH = AsrVadResFilePath
  AUDIO_MILLS = AudioMills
  AUDIO_SOURCE = AudioSource
  BOT_ID = BotId
  BOT_SESSION = BotSession
  BOT_SESSION_ID = BotSessionId
  BOT_SESSION_LIST = BotSessionList
  CALLBACK_ASR_RESULT = CallbackAsrResult
  CALLBACK_ASR_STATUS = CallbackAsrStatus
  CALLBACK_ERROR_CODE = CallbackErrorCode
  CALLBACK_ERROR_DESC = CallbackErrorDesc
  CALLBACK_ERROR_DOMAIN = CallbackErrorDomain
  CALLBACK_EVENT_ASR_AUDIO = CallbackEventAsrAudio
  CALLBACK_EVENT_ASR_BEGIN = CallbackEventAsrBegin
  CALLBACK_EVENT_ASR_CANCEL = CallbackEventAsrCancel
  CALLBACK_EVENT_ASR_END = CallbackEventAsrEnd
  CALLBACK_EVENT_ASR_ERROR = CallbackEventAsrError
  CALLBACK_EVENT_ASR_EXIT = CallbackEventAsrExit
  CALLBACK_EVENT_ASR_FINISH = CallbackEventAsrFinish
  CALLBACK_EVENT_ASR_LOADED = CallbackEventAsrLoaded
  CALLBACK_EVENT_ASR_LOG = CallbackEventAsrLog
  CALLBACK_EVENT_ASR_LONG_SPEECH = CallbackEventAsrLongSpeech
  CALLBACK_EVENT_ASR_PARTIAL = CallbackEventAsrPartial
  CALLBACK_EVENT_ASR_READY = CallbackEventAsrReady
  CALLBACK_EVENT_ASR_SERIALNUMBER = CallbackEventAsrSerialnumber
  CALLBACK_EVENT_ASR_UNLOADED = CallbackEventAsrUnloaded
  CALLBACK_EVENT_ASR_VOLUME = CallbackEventAsrVolume
  CALLBACK_EVENT_UNIT_FINISH = CallbackEventUnitFinish
  CALLBACK_EVENT_UPLOAD_COMPLETE = CallbackEventUploadComplete
  CALLBACK_EVENT_UPLOAD_FINISH = CallbackEventUploadFinish
  CALLBACK_EVENT_WAKEUP_AUDIO = CallbackEventWakeupAudio
  CALLBACK_EVENT_WAKEUP_ERROR = CallbackEventWakeupError
  CALLBACK_EVENT_WAKEUP_LOADED = CallbackEventWakeupLoaded
  CALLBACK_EVENT_WAKEUP_READY = CallbackEventWakeupReady
  CALLBACK_EVENT_WAKEUP_STARTED = CallbackEventWakeupStarted
  CALLBACK_EVENT_WAKEUP_STOPED = CallbackEventWakeupStoped
  CALLBACK_EVENT_WAKEUP_SUCCESS = CallbackEventWakeupSuccess
  CALLBACK_EVENT_WAKEUP_UNLOADED = CallbackEventWakeupUnloaded
  CALLBACK_WAK_RESULT = CallbackWakResult
  CALLBACK_WAK_STATUS = CallbackWakStatus
  CONTACT = Contact
  DECODER = Decoder
  DEC_TYPE = DecType
  DEV = Dev
  DISABLE_PUNCTUATION = DisablePunctuation
  ENABLE_HTTPDNS = EnableHttpdns
  IN_FILE = InFile
  KWS_TYPE = KwsType
  LANGUAGE = Language
  LOG_LEVEL = LogLevel
  NLU = Nlu
  OUT_FILE = OutFile
  PAM = Pam
  PID = Pid
  PROP = Prop
  PUBLIC_DECODER = PublicDecoder
  SAMPLE_RATE = SampleRate
  SECRET = Secret
  SLOT_DATA = SlotData
  SOUND_CANCEL = SoundCancel
  SOUND_END = SoundEnd
  SOUND_ERROR = SoundError
  SOUND_START = SoundStart
  SOUND_SUCCESS = SoundSuccess
  strCALLBACK_ASR_LEVEL = StrCALLBACKASRLEVEL
  UPLOAD_CALLBACK_NAME = UploadCallbackName
  UPLOADER_CANCEL = UploaderCancel
  UPLOADER_START = UploaderStart
  URL = Url
  URL_NEW = UrlNew
  URL_OLD = UrlOld
  VAD = Vad
  VAD_DNN = VadDnn
  VAD_ENDPOINT_TIMEOUT = VadEndpointTimeout
  VAD_MFE = VadMfe
  VAD_MODEL = VadModel
  VAD_TOUCH = VadTouch
  WAKEUP_CALLBACK_NAME = WakeupCallbackName
  WAKEUP_LOAD_ENGINE = WakeupLoadEngine
  WAKEUP_START = WakeupStart
  WAKEUP_STOP = WakeupStop
  WAKEUP_UNLOAD_ENGINE = WakeupUnloadEngine
  WP_DAT_FILEPATH = WpDatFilepath
  WP_ENGINE_LICENSE_FILE_PATH = WpEngineLicenseFilePath
  WP_VAD_ENABLE = WpVadEnable
  WP_WORDS = WpWords
  WP_WORDS_FILE = WpWordsFile
com/baidu/speech/asr/WakeUpControl = Com.Baidu.Speech.Asr.WakeUpControl
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  postEvent(Ljava/lang/String;Ljava/lang/String;)Lcom/baidu/speech/core/BDSErrorDescription; = PostEvent(string, string)
  receiveCoreEvent(Lcom/baidu/speech/core/BDSMessage;Lcom/baidu/speech/core/BDSSDKLoader$BDSSDKInterface;)V = ReceiveCoreEvent(Com.Baidu.Speech.Core.BDSMessage, Com.Baidu.Speech.Core.BDSSDKLoader.IBDSSDKInterface)
  setListener(Lcom/baidu/speech/EventListener;)V = SetListener(Com.Baidu.Speech.IEventListener)
com/baidu/speech/audio/MicrophoneServer = Com.Baidu.Speech.Audio.MicrophoneServer
  S_DATA_LENGTH = SDataLength
  S_LENGTH = SLength
  TAG = Tag
  create(Ljava/lang/String;I)I = Create(string, int)
  run()V = Run()
com/baidu/speech/core/ASREngine = Com.Baidu.Speech.Core.ASREngine
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  ERROR_AUDIO = ErrorAudio
  ERROR_CLIENT = ErrorClient
  ERROR_INSUFFICIENT_PERMISSIONS = ErrorInsufficientPermissions
  ERROR_NETWORK = ErrorNetwork
  ERROR_NETWORK_TIMEOUT = ErrorNetworkTimeout
  ERROR_NO_MATCH = ErrorNoMatch
  ERROR_RECOGNIZER_BUSY = ErrorRecognizerBusy
  ERROR_SERVER = ErrorServer
  ERROR_SPEECH_TIMEOUT = ErrorSpeechTimeout
  postEvent(Ljava/lang/String;Ljava/lang/String;)Lcom/baidu/speech/core/BDSErrorDescription; = PostEvent(string, string)
  receiveCoreEvent(Lcom/baidu/speech/core/BDSMessage;Lcom/baidu/speech/core/BDSSDKLoader$BDSSDKInterface;)V = ReceiveCoreEvent(Com.Baidu.Speech.Core.BDSMessage, Com.Baidu.Speech.Core.BDSSDKLoader.IBDSSDKInterface)
  setListener(Lcom/baidu/speech/asr/ASRListener;)V = SetListener(Com.Baidu.Speech.Asr.IASRListener)
com/baidu/speech/core/BDSCharacterCoder = Com.Baidu.Speech.Core.BDSCharacterCoder
  <init>()V = .ctor()
  convertCharacterEncoding([BI[BI)I = ConvertCharacterEncoding(byte[], int, byte[], int)
com/baidu/speech/core/BDSCoreJniInterface = Com.Baidu.Speech.Core.BDSCoreJniInterface
  <init>()V = .ctor()
  EchoMessage(Lcom/baidu/speech/core/BDSMessage;)V = EchoMessage(Com.Baidu.Speech.Core.BDSMessage)
  getNewSDK(Ljava/lang/String;)Lcom/baidu/speech/core/BDSCoreJniInterface; = GetNewSDK(string)
  instanceInitialized()Z = InstanceInitialized()
  postMessage(Lcom/baidu/speech/core/BDSMessage;)I = PostMessage(Com.Baidu.Speech.Core.BDSMessage)
  release()V = Release()
  setListener(Lcom/baidu/speech/core/BDSSDKLoader$BDSCoreEventListener;)V = SetListener(Com.Baidu.Speech.Core.BDSSDKLoader.IBDSCoreEventListener)
com/baidu/speech/core/BDSErrorDescription = Com.Baidu.Speech.Core.BDSErrorDescription
  <init>()V = .ctor()
  errorCode = ErrorCode
  errorDescription = ErrorDescription
  errorDomain = ErrorDomain
  getDetailCode()I = DetailCode
com/baidu/speech/core/BDSHttpRequestMaker = Com.Baidu.Speech.Core.BDSHttpRequestMaker
  <init>()V = .ctor()
  cancelRequest()V = CancelRequest()
  makeRequest(Ljava/lang/String;[B[Ljava/lang/String;FI)Lcom/baidu/speech/core/BDSHTTPResponse; = MakeRequest(string, byte[], string[], float, int)
  newRequestMaker()Lcom/baidu/speech/core/BDSHttpRequestMaker; = NewRequestMaker()
  readData()Lcom/baidu/speech/core/BDSHTTPResponse; = ReadData()
  sendData([BZ)I = SendData(byte[], bool)
  setupConnection(Ljava/lang/String;[Ljava/lang/String;FI)I = SetupConnection(string, string[], float, int)
  setupDownloadConnection(Ljava/lang/String;[Ljava/lang/String;FI)I = SetupDownloadConnection(string, string[], float, int)
  setupUploadConnection(Ljava/lang/String;[Ljava/lang/String;FI)I = SetupUploadConnection(string, string[], float, int)
com/baidu/speech/core/BDSHTTPResponse = Com.Baidu.Speech.Core.BDSHTTPResponse
  <init>()V = .ctor()
  m_http_status = MHttpStatus
  m_log = MLog
  m_request_status = MRequestStatus
com/baidu/speech/core/BDSMessage = Com.Baidu.Speech.Core.BDSMessage
  <init>()V = .ctor()
  m_dataOffset = MDataOffset
  m_messageData = MMessageData
  m_messageName = MMessageName
  m_messageParams = MMessageParams
com/baidu/speech/core/BDSParamBase = Com.Baidu.Speech.Core.BDSParamBase
  <init>()V = .ctor()
  iParamType = IParamType
  boolParam(Z)Lcom/baidu/speech/core/BDSParamBase$BDSBooleanParam; = BoolParam(bool)
  floatParam(F)Lcom/baidu/speech/core/BDSParamBase$BDSFloatParam; = FloatParam(float)
  intParam(I)Lcom/baidu/speech/core/BDSParamBase$BDSIntParam; = IntParam(int)
  objectParam(Ljava/lang/Object;Ljava/lang/String;)Lcom/baidu/speech/core/BDSParamBase$BDSObjectParam; = ObjectParam(Java.Lang.Object, string)
com/baidu/speech/core/BDSSDKLoader = Com.Baidu.Speech.Core.BDSSDKLoader
  <init>()V = .ctor()
  getEngineVersion()I = EngineVersion
  getSDKObjectForSDKType(Ljava/lang/String;Landroid/content/Context;)Lcom/baidu/speech/core/BDSSDKLoader$BDSSDKInterface; = GetSDKObjectForSDKType(string, Android.Content.Context)
  loadLibraries()V = LoadLibraries()
  makeDir(Ljava/lang/String;)Z = MakeDir(string)
  setJavaContext(Landroid/content/Context;)V = SetJavaContext(Android.Content.Context)
  SetLogLevel(I)V = SetLogLevel(int)
  setWriteableLibraryDataPath(Ljava/lang/String;)V = SetWriteableLibraryDataPath(string)
  setWriteableTempPath(Ljava/lang/String;)V = SetWriteableTempPath(string)
  setWriteableUserDataPath(Ljava/lang/String;)V = SetWriteableUserDataPath(string)
com/baidu/speech/core/BDSSpeechSDKContext = Com.Baidu.Speech.Core.BDSSpeechSDKContext
  <init>()V = .ctor()
  ctx = Ctx
com/baidu/speech/easr/easrNativeJni = Com.Baidu.Speech.Easr.EasrNativeJni
  AECExit()I = AECExit()
  AECInit()I = AECInit()
  AECProcess([S[S[SI)I = AECProcess(short[], short[], short[], int)
  AECReset()I = AECReset()
  SetLogLevel(I)I = SetLogLevel(int)
com/baidu/speech/easr/VoicePreProcess = Com.Baidu.Speech.Easr.VoicePreProcess
  initJni(IIIDD)I = InitJni(int, int, int, double, double)
  process([B[B[S)I = Process(byte[], byte[], short[])
  releaseJni(I)I = ReleaseJni(int)
com/baidu/speech/EventListener = Com.Baidu.Speech.IEventListener
  onEvent(Ljava/lang/String;Ljava/lang/String;[BII)V = OnEvent(string, string, byte[], int, int)
com/baidu/speech/EventManager = Com.Baidu.Speech.IEventManager
  registerListener(Lcom/baidu/speech/EventListener;)V = RegisterListener(Com.Baidu.Speech.IEventListener)
  send(Ljava/lang/String;Ljava/lang/String;[BII)V = Send(string, string, byte[], int, int)
  unregisterListener(Lcom/baidu/speech/EventListener;)V = UnregisterListener(Com.Baidu.Speech.IEventListener)
com/baidu/speech/EventManagerFactory = Com.Baidu.Speech.EventManagerFactory
  <init>()V = .ctor()
  create(Landroid/content/Context;Ljava/lang/String;)Lcom/baidu/speech/EventManager; = Create(Android.Content.Context, string)
  create(Landroid/content/Context;Ljava/lang/String;Z)Lcom/baidu/speech/EventManager; = Create(Android.Content.Context, string, bool)
com/baidu/speech/MicrophoneInputStream = Com.Baidu.Speech.MicrophoneInputStream
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  <init>(II)V = .ctor(int, int)
  <init>(IILjava/io/InputStream;)V = .ctor(int, int, System.IO.Stream)
  <init>(IILjava/io/InputStream;Landroid/media/AudioRecord;)V = .ctor(int, int, System.IO.Stream, Android.Media.AudioRecord)
  <init>(ILjava/io/InputStream;)V = .ctor(int, System.IO.Stream)
  <init>(Landroid/media/AudioRecord;)V = .ctor(Android.Media.AudioRecord)
  mills()J = Mills()
  mills(J)V = Mills(long)
  read()I = Read()
com/baidu/speech/utils/AESUtil = Com.Baidu.Speech.Utils.AESUtil
  <init>()V = .ctor()
  decrypt(Ljava/lang/String;Ljava/lang/String;[B)[B = Decrypt(string, string, byte[])
  encrypt(Ljava/lang/String;Ljava/lang/String;[B)[B = Encrypt(string, string, byte[])
com/baidu/speech/utils/analysis/Analysis = Com.Baidu.Speech.Utils.Analysis.Analysis
  <init>()V = .ctor()
  asyncUploadAll(Landroid/content/Context;)V = AsyncUploadAll(Android.Content.Context)
  log(Landroid/content/Context;Lcom/baidu/speech/utils/analysis/Analysis$Item;)V = Log(Android.Content.Context, Com.Baidu.Speech.Utils.Analysis.Analysis.Item)
com/baidu/speech/utils/analysis/Utility = Com.Baidu.Speech.Utils.Analysis.Utility
  <init>()V = .ctor()
  getOS()Ljava/lang/String; = OS
  getSdkName()Ljava/lang/String; = SdkName
  getSdkVersion()Ljava/lang/String; = SdkVersion
  checkPermission(Landroid/content/Context;Ljava/lang/String;)Z = CheckPermission(Android.Content.Context, string)
  encryptBASE64([B)Ljava/lang/String; = EncryptBASE64(byte[])
  encryptBASE64(Ljava/lang/String;)Ljava/lang/String; = EncryptBASE64(string)
  encryptGZIP(Ljava/lang/String;)[B = EncryptGZIP(string)
  getAppName(Landroid/content/Context;)Ljava/lang/String; = GetAppName(Android.Content.Context)
  getLastDownloadStatPeriod(Landroid/content/Context;)I = GetLastDownloadStatPeriod(Android.Content.Context)
  getLastUploadStatTime(Landroid/content/Context;)J = GetLastUploadStatTime(Android.Content.Context)
  getLicenseDataFromFile(Ljava/lang/String;[B)I = GetLicenseDataFromFile(string, byte[])
  getNetType(Landroid/content/Context;)I = GetNetType(Android.Content.Context)
  getNetworkInfo(Landroid/content/Context;)Landroid/net/NetworkInfo; = GetNetworkInfo(Android.Content.Context)
  getPackageName(Landroid/content/Context;)Ljava/lang/String; = GetPackageName(Android.Content.Context)
  getPlatform(Landroid/content/Context;)Ljava/lang/String; = GetPlatform(Android.Content.Context)
  getScreen(Landroid/content/Context;)Ljava/lang/String; = GetScreen(Android.Content.Context)
  getSignatureMD5(Landroid/content/Context;)Ljava/lang/String; = GetSignatureMD5(Android.Content.Context)
  isNetworkConnected(Landroid/content/Context;)Z = IsNetworkConnected(Android.Content.Context)
  setLastDownloadStatPeriod(Landroid/content/Context;I)V = SetLastDownloadStatPeriod(Android.Content.Context, int)
  setLastUploadStatTime(Landroid/content/Context;J)V = SetLastUploadStatTime(Android.Content.Context, long)
com/baidu/speech/utils/AsrError = Com.Baidu.Speech.Utils.AsrError
  <init>()V = .ctor()
  ERROR_ASR_ENGINE_BUSY = ErrorAsrEngineBusy
  ERROR_AUDIO = ErrorAudio
  ERROR_AUDIO_FILE_CLOSE = ErrorAudioFileClose
  ERROR_AUDIO_FILE_OPEN = ErrorAudioFileOpen
  ERROR_AUDIO_FILE_READ = ErrorAudioFileRead
  ERROR_AUDIO_INCORRECT = ErrorAudioIncorrect
  ERROR_AUDIO_RECORDER_CLOSE = ErrorAudioRecorderClose
  ERROR_AUDIO_RECORDER_NOT_AVAILABLE = ErrorAudioRecorderNotAvailable
  ERROR_AUDIO_RECORDER_OPEN = ErrorAudioRecorderOpen
  ERROR_AUDIO_RECORDER_PARAM = ErrorAudioRecorderParam
  ERROR_AUDIO_RECORDER_READ = ErrorAudioRecorderRead
  ERROR_AUDIO_SAMPLE_ERROR = ErrorAudioSampleError
  ERROR_AUDIO_VAD_INCORRECT = ErrorAudioVadIncorrect
  ERROR_AUDIO_VAD_NO_SPEECH = ErrorAudioVadNoSpeech
  ERROR_AUDIO_VAD_SPEAK_TOO_SHORT = ErrorAudioVadSpeakTooShort
  ERROR_CLIENT = ErrorClient
  ERROR_CLIENT_GET_TOKEN = ErrorClientGetToken
  ERROR_CLIENT_NEED_HTTPS_URL = ErrorClientNeedHttpsUrl
  ERROR_CLIENT_PARAM = ErrorClientParam
  ERROR_CLIENT_RESOLVE_URL = ErrorClientResolveUrl
  ERROR_CLIENT_UNABLE_LOAD_LIBRARY = ErrorClientUnableLoadLibrary
  ERROR_INSUFFICIENT_PERMISSIONS = ErrorInsufficientPermissions
  ERROR_NETWORK = ErrorNetwork
  ERROR_NETWORK_FAIL_AGENT_CONNECT_DOWN = ErrorNetworkFailAgentConnectDown
  ERROR_NETWORK_FAIL_AGENT_CONNECT_UP = ErrorNetworkFailAgentConnectUp
  ERROR_NETWORK_FAIL_AGENT_DATA_DOWN = ErrorNetworkFailAgentDataDown
  ERROR_NETWORK_FAIL_AGENT_READ_DOWN = ErrorNetworkFailAgentReadDown
  ERROR_NETWORK_FAIL_AGENT_READ_UP = ErrorNetworkFailAgentReadUp
  ERROR_NETWORK_FAIL_CONNECT = ErrorNetworkFailConnect
  ERROR_NETWORK_FAIL_CONNECT_DOWN = ErrorNetworkFailConnectDown
  ERROR_NETWORK_FAIL_CONNECT_UP = ErrorNetworkFailConnectUp
  ERROR_NETWORK_FAIL_DATA_DOWN = ErrorNetworkFailDataDown
  ERROR_NETWORK_FAIL_READ = ErrorNetworkFailRead
  ERROR_NETWORK_FAIL_READ_DOWN = ErrorNetworkFailReadDown
  ERROR_NETWORK_FAIL_READ_UP = ErrorNetworkFailReadUp
  ERROR_NETWORK_NOT_AVAILABLE = ErrorNetworkNotAvailable
  ERROR_NETWORK_NOT_GRANTED = ErrorNetworkNotGranted
  ERROR_NETWORK_TIMEOUT = ErrorNetworkTimeout
  ERROR_NETWORK_TIMEOUT_CONNECT = ErrorNetworkTimeoutConnect
  ERROR_NETWORK_TIMEOUT_CONNECT_DOWN = ErrorNetworkTimeoutConnectDown
  ERROR_NETWORK_TIMEOUT_CONNECT_UP = ErrorNetworkTimeoutConnectUp
  ERROR_NETWORK_TIMEOUT_DNS = ErrorNetworkTimeoutDns
  ERROR_NETWORK_TIMEOUT_READ = ErrorNetworkTimeoutRead
  ERROR_NETWORK_TIMEOUT_READ_DOWN = ErrorNetworkTimeoutReadDown
  ERROR_NETWORK_TIMEOUT_READ_UP = ErrorNetworkTimeoutReadUp
  ERROR_NO_MATCH = ErrorNoMatch
  ERROR_NO_MATCH_RESULT = ErrorNoMatchResult
  ERROR_NO_RECORD_PERMISSION = ErrorNoRecordPermission
  ERROR_OFFLINE_ENGINE_FREE_FAIL = ErrorOfflineEngineFreeFail
  ERROR_OFFLINE_ENGINE_INITIAL_FAIL = ErrorOfflineEngineInitialFail
  ERROR_OFFLINE_ENGINE_NOT_SUPPORT = ErrorOfflineEngineNotSupport
  ERROR_OFFLINE_ENGINE_RESET_FAIL = ErrorOfflineEngineResetFail
  ERROR_OFFLINE_EXCEPTION = ErrorOfflineException
  ERROR_OFFLINE_INVALID_GRAMMAR = ErrorOfflineInvalidGrammar
  ERROR_OFFLINE_INVALID_LICENSE = ErrorOfflineInvalidLicense
  ERROR_OFFLINE_INVALID_MODEL = ErrorOfflineInvalidModel
  ERROR_OFFLINE_NO_LICENSE = ErrorOfflineNoLicense
  ERROR_OFFLINE_NOT_INITIAL = ErrorOfflineNotInitial
  ERROR_OFFLINE_PARAM = ErrorOfflineParam
  ERROR_OFFLINE_RECOGNIZE_FAIL = ErrorOfflineRecognizeFail
  ERROR_RECOGNIZER_BUSY = ErrorRecognizerBusy
  ERROR_SERVER = ErrorServer
  ERROR_SERVER_APP = ErrorServerApp
  ERROR_SERVER_BACKEND = ErrorServerBackend
  ERROR_SERVER_PARAM = ErrorServerParam
  ERROR_SERVER_RECOGNITION = ErrorServerRecognition
  ERROR_SPEECH_TIMEOUT = ErrorSpeechTimeout
  ERROR_SPEECH_TOO_LONG = ErrorSpeechTooLong
  ERROR_WAKEUP_ENGINE_EXCEPTION = ErrorWakeupEngineException
  ERROR_WAKEUP_ENGINE_FREE_FAIL = ErrorWakeupEngineFreeFail
  ERROR_WAKEUP_ENGINE_INITIAL_FAIL = ErrorWakeupEngineInitialFail
  ERROR_WAKEUP_ENGINE_NOT_SUPPORT = ErrorWakeupEngineNotSupport
  ERROR_WAKEUP_ENGINE_RESET_FAIL = ErrorWakeupEngineResetFail
  ERROR_WAKEUP_EXCEPTION = ErrorWakeupException
  ERROR_WAKEUP_INVALID_LICENSE = ErrorWakeupInvalidLicense
  ERROR_WAKEUP_MEM_ALLOC_FAIL = ErrorWakeupMemAllocFail
  ERROR_WAKEUP_MODEL_EXCEPTION = ErrorWakeupModelException
  ERROR_WAKEUP_NO_LICENSE = ErrorWakeupNoLicense
  ERROR_WAKEUP_RECOGNIZE_FAIL = ErrorWakeupRecognizeFail
  getDescFromCode(I)Ljava/lang/String; = GetDescFromCode(int)
com/baidu/speech/utils/Base64 = Com.Baidu.Speech.Utils.Base64
  <init>()V = .ctor()
  decode([B)[B = Decode(byte[])
  decode([BI)[B = Decode(byte[], int)
  encode([BLjava/lang/String;)Ljava/lang/String; = Encode(byte[], string)
com/baidu/speech/utils/CommonParam = Com.Baidu.Speech.Utils.CommonParam
  <init>()V = .ctor()
  AGENT_URL = AgentUrl
  REQUEST_URL = RequestUrl
  getCUID(Landroid/content/Context;)Ljava/lang/String; = GetCUID(Android.Content.Context)
com/baidu/speech/utils/Device = Com.Baidu.Speech.Utils.Device
  getDevID(Landroid/content/Context;)Ljava/lang/String; = GetDevID(Android.Content.Context)
com/baidu/speech/utils/DeviceId = Com.Baidu.Speech.Utils.DeviceId
  getCUID(Landroid/content/Context;)Ljava/lang/String; = GetCUID(Android.Content.Context)
  getDevID(Landroid/content/Context;)Ljava/lang/String; = GetDevID(Android.Content.Context)
  getDroidId(Landroid/content/Context;)Ljava/lang/String; = GetDroidId(Android.Content.Context)
  getIntlMobEqId(Landroid/content/Context;)Ljava/lang/String; = GetIntlMobEqId(Android.Content.Context)
com/baidu/speech/utils/LogUtil = Com.Baidu.Speech.Utils.LogUtil
  <init>()V = .ctor()
  DEBUG = Debug
  ERROR = Error
  INFO = Info
  logLevel = LogLevel
  LOGTAG = Logtag
  OFF = Off
  VERBOSE = Verbose
  WARN = Warn
  d(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = D(string, string, params Java.Lang.Object[])
  d(Ljava/lang/String;[Ljava/lang/String;)V = D(string, params string[])
  d(Ljava/lang/String;Ljava/lang/Throwable;[Ljava/lang/String;)V = D(string, Java.Lang.Throwable, params string[])
  e(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = E(string, string, params Java.Lang.Object[])
  e(Ljava/lang/String;[Ljava/lang/String;)V = E(string, params string[])
  e(Ljava/lang/String;Ljava/lang/Throwable;[Ljava/lang/String;)V = E(string, Java.Lang.Throwable, params string[])
  e(Ljava/lang/Throwable;)V = E(Java.Lang.Throwable)
  i(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = I(string, string, params Java.Lang.Object[])
  i(Ljava/lang/String;[Ljava/lang/String;)V = I(string, params string[])
  i(Ljava/lang/String;Ljava/lang/Throwable;[Ljava/lang/String;)V = I(string, Java.Lang.Throwable, params string[])
  isLoggable(I)Z = IsLoggable(int)
  setLogLevel(I)V = SetLogLevel(int)
  setLogLevel(Ljava/lang/String;)V = SetLogLevel(string)
  Test(Ljava/lang/String;)V = Test(string)
  v(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = V(string, string, params Java.Lang.Object[])
  v(Ljava/lang/String;[Ljava/lang/String;)V = V(string, params string[])
  v(Ljava/lang/String;Ljava/lang/Throwable;[Ljava/lang/String;)V = V(string, Java.Lang.Throwable, params string[])
  w(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = W(string, string, params Java.Lang.Object[])
  w(Ljava/lang/String;[Ljava/lang/String;)V = W(string, params string[])
  w(Ljava/lang/String;Ljava/lang/Throwable;[Ljava/lang/String;)V = W(string, Java.Lang.Throwable, params string[])
com/baidu/speech/utils/MD5Util = Com.Baidu.Speech.Utils.MD5Util
  <init>()V = .ctor()
  hexDigits = HexDigits
  messagedigest = Messagedigest
  getFileMD5String(Ljava/io/File;)Ljava/lang/String; = GetFileMD5String(Java.IO.File)
  toHexString([BLjava/lang/String;Z)Ljava/lang/String; = ToHexString(byte[], string, bool)
  toMd5([BZ)Ljava/lang/String; = ToMd5(byte[], bool)
com/baidu/speech/utils/Policy = Com.Baidu.Speech.Utils.Policy
  <init>()V = .ctor()
  app(Landroid/content/Context;)Ljava/lang/String; = App(Android.Content.Context)
  modelVadDefaultResFile(Landroid/content/Context;)Ljava/lang/String; = ModelVadDefaultResFile(Android.Content.Context)
  pfm(Landroid/content/Context;)Ljava/lang/String; = Pfm(Android.Content.Context)
  sample(Landroid/content/Context;)I = Sample(Android.Content.Context)
  taskTimeout()I = TaskTimeout()
  uid(Landroid/content/Context;)Ljava/lang/String; = Uid(Android.Content.Context)
  uiRetryFile(Landroid/content/Context;)Ljava/lang/String; = UiRetryFile(Android.Content.Context)
  ver(Landroid/content/Context;)Ljava/lang/String; = Ver(Android.Content.Context)
com/baidu/speech/utils/SHA1Util = Com.Baidu.Speech.Utils.SHA1Util
  <init>()V = .ctor()
  sha1([B)[B = Sha1(byte[])
com/baidu/speech/utils/Util = Com.Baidu.Speech.Utils.Util
  <init>()V = .ctor()
  getDevId(Landroid/telephony/TelephonyManager;)Ljava/lang/String; = GetDevId(Android.Telephony.TelephonyManager)
  pfm(Landroid/content/Context;)Ljava/lang/String; = Pfm(Android.Content.Context)
  toMd5([BZ)Ljava/lang/String; = ToMd5(byte[], bool)
com/baidu/speech/utils/Utility = Com.Baidu.Speech.Utils.Utility
  getMaxCpuFreq()I = MaxCpuFreq
  checkPermission(Landroid/content/Context;Ljava/lang/String;)Z = CheckPermission(Android.Content.Context, string)
  fun(Ljava/lang/Exception;)Ljava/lang/String; = Fun(Java.Lang.Exception)
  getFileName(Ljava/lang/Exception;)Ljava/lang/String; = GetFileName(Java.Lang.Exception)
  getLineNumber(Ljava/lang/Exception;)Ljava/lang/String; = GetLineNumber(Java.Lang.Exception)
  getNetworkInfo(Landroid/content/Context;)Landroid/net/NetworkInfo; = GetNetworkInfo(Android.Content.Context)
  getVoiceDataSizeInShort(III)I = GetVoiceDataSizeInShort(int, int, int)
  getWifiOr2gOr3G(Landroid/content/Context;)I = GetWifiOr2gOr3G(Android.Content.Context)
  is2G(Landroid/content/Context;)Z = Is2G(Android.Content.Context)
  isNetworkConnected(Landroid/content/Context;)Z = IsNetworkConnected(Android.Content.Context)
  isWifiConnected(Landroid/content/Context;)Z = IsWifiConnected(Android.Content.Context)
  urlEncode(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = UrlEncode(string, string)
com/baidu/speech/VoiceRecognitionService = Com.Baidu.Speech.VoiceRecognitionService
  <init>()V = .ctor()
  EVENT_ENGINE_SWITCH = EventEngineSwitch
  TAG = Tag
  VERSION_NAME = VersionName
  getSdkVersion()Ljava/lang/String; = SdkVersion
  fromJson(Lorg/json/JSONObject;)Landroid/os/Bundle; = FromJson(Org.Json.JSONObject)
  onCancel(Landroid/speech/RecognitionService$Callback;)V = OnCancel(Android.Speech.RecognitionService.Callback)
  onStartListening(Landroid/content/Intent;Landroid/speech/RecognitionService$Callback;)V = OnStartListening(Android.Content.Intent, Android.Speech.RecognitionService.Callback)
  onStopListening(Landroid/speech/RecognitionService$Callback;)V = OnStopListening(Android.Speech.RecognitionService.Callback)
